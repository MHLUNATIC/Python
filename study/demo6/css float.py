# 先来了解一下block元素和inline元素在文档流中的排列方式。
# 　　block元素通常被现实为独立的一块，独占一行，多个block元素会各自新起一行，默认block元素宽度自动填满其父
# 元素宽度。block元素可以设置width、height、margin、padding属性；
#     inline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随
# 元素的内容而变化。inline元素设置width、height属性无效。inline元素的margin和padding属性。水平方向的padding-left,
# padding-right, margin-left, margin-right都产生边距效果；但竖直方向的padding-top,padding-bottom, margin-top,
# margin-bottom不会产生边距效果。
# 常见的块级元素有 div、form、table、p、pre、h1～h5、dl、ol、ul 等。
# 常见的内联元素有span、a、strong、em、label、input、select、textarea、img、br等
#
# 所谓的文档流，指的是元素排版布局过程中，元素会自动从左往右，从上往下的流式排列。
# 脱离文档流，也就是将元素从普通的布局排版中拿走，其他盒子在定位的时候，会当做脱离文档流的元素不存在而进行定位。
#
# 只有绝对定位absolute和浮动float才会脱离文档流。
#
# ---部分无视和完全无视的区别？需要注意的是，使用float脱离文档流时，其他盒子会无视这个元素，但其他盒子内的
# 文本依然会为这个元素让出位置，环绕在周围(可以说是部分无视)。而对于使用absolute position脱离文档流的元素，
# 其他盒子与其他盒子内的文本都会无视它。(可以说是完全无视)浮动的表现
# 浮动的表现定义：浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框
#     不在文档的普通流中，所以文档的普通流中的浮动框之后的块框表现得就像浮动框不存在一样。（注意这里是块框
#     而不是内联元素；浮动框只对它后面的元素造成影响）
# 注意：当初float被设计的时候就是用来完成文本环绕的效果，所以文本不会被挡住，这是float的特性，即float是一
#      种不彻底的脱离文档流方式。无论多么复杂的布局，其基本出发点均是：“如何在一行显示多个div元素”。
# 清除浮动：
#     在非IE浏览器（如Firefox）下，当容器的高度为auto，且容器的内容中有浮动（float为left或right）的元素，
#     在这种情况下，容器的高度不能自动伸长以适应内容的高度，使得内容溢出到容器外面而影响（甚至破坏）布局的
#     现象。这个现象叫浮动溢出，为了防止这个现象的出现而进行的CSS处理，就叫CSS清除浮动。
# clear语法：
#     clear : none | left | right | both
#
#     取值：
#     none : 默认值。允许两边都可以有浮动对象
#     left : 不允许左边有浮动对象
#     right : 不允许右边有浮动对象
#     both : 不允许有浮动对象
# 但是需要注意的是：clear属性只会对自身起作用，而不会影响其他元素。如果一个元素的右侧有一浮动对象，而这个元
# 素设置了不允许右边有浮动对象，即clear：right，则这个元素会自动下移一格，达到本元素右边没有浮动对象的目的。
# 方式1(推荐):
# .clearfix:after {             <----在类名为“clearfix”的元素内最后面加入内容；
# content: ".";                 <----内容为“.”就是一个英文的句号而已。也可以不写。
# display: block;               <----加入的这个元素转换为块级元素。
# clear: both;                  <----清除左右两边浮动。
# visibility: hidden;           <----可见度设为隐藏。注意它和display:none;是有区别的。visibility:hidden;仍然占据空间，只是看不到而已；
# line-height: 0;               <----行高为0；
# height: 0;                    <----高度为0；
# font-size:0;                  <----字体大小为0；
# }
# .clearfix { *zoom:1;}         <----这是针对于IE6的，因为IE6不支持:after伪类，这个神奇的zoom:1让IE6的元素可以清除浮动来包裹内部元素。
# 整段代码就相当于在浮动元素后面跟了个宽高为0的空div，然后设定它clear:both来达到清除浮动的效果。
# 之所以用它，是因为，你不必在html文件中写入大量无意义的空标签，又能清除浮动。
# 方式2：
# overflow:hidden;
# overflow：hidden的含义是超出的部分要裁切隐藏，float的元素虽然不在普通流中，但是他是浮动在普通流之上的，
# 可以把普通流元素+浮动元素想象成一个立方体。如果没有明确设定包含容器高度的情况下，它要计算内容的全部高
# 度才能确定在什么位置hidden，这样浮动元素的高度就要被计算进去。这样包含容器就会被撑开，清除浮动。